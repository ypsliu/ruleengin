<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:int="http://www.springframework.org/schema/integration"
	   xmlns:int-redis="http://www.springframework.org/schema/integration/redis"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans.xsd
	   		http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/integration
			http://www.springframework.org/schema/integration/spring-integration.xsd
			http://www.springframework.org/schema/integration/redis
			http://www.springframework.org/schema/integration/redis/spring-integration-redis.xsd
			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<context:property-placeholder location="file:${APP_HOME}/conf/ruleengine-core.properties" ignore-unresolvable="true" />
	<context:property-placeholder location="file:${APP_HOME}/conf/ruleengine-redis.properties" ignore-unresolvable="true" />

	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="testOnBorrow" value="false" />
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
	</bean>

	<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}" />
		<property name="port" value="${redis.port}" />
		<property name="usePool" value="true"/>
		<property name="poolConfig" ref="jedisPoolConfig"/>
	</bean>

	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="jdkRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
	<!--bean id="customJsonSerializer" class="cn.rongcapital.ruleengine.serializer.CustomJsonSerializer" /-->



	<int:chain input-channel="requestGateway">
		<int-redis:queue-outbound-channel-adapter queue-expression="headers.ruleengine_match_resource_redis_queue" />
	</int:chain>

	<int:channel id="matchRequestDataQueueChannel" />
	<int-redis:queue-inbound-channel-adapter queue="matchRequestData"
											 channel="matchRequestDataQueueChannel"
											 serializer="stringRedisSerializer"
											 task-executor="taskExecutor" />
	<int:service-activator ref="requestServiceActivator"
						   method="matchRequestDataActivator" input-channel="matchRequestDataQueueChannel" />



	<int:chain input-channel="ruleSetQueue">
		<int-redis:queue-outbound-channel-adapter queue-expression="headers.ruleengine_ruleset_redis_queue" />
	</int:chain>

	<int:channel id="ruleSetQueueChannel" />
	<int-redis:queue-inbound-channel-adapter queue="ruleSet"
											 channel="ruleSetQueueChannel"
											 serializer="stringRedisSerializer"
											 task-executor="singleTaskExecutor"/>
	<int:service-activator ref="ruleExeServiceActivator" method="ruleSetActivator"
						   input-channel="ruleSetQueueChannel" output-channel="ruleSetOutputChannel" />
	<int:channel id="ruleSetOutputChannel">
		<int:queue />
	</int:channel>
	<int:service-activator ref="persistenceServiceActivator" method="persistOrderRules" input-channel="ruleSetOutputChannel">
		<int:poller fixed-rate="${si.service.activator.poller.fix.rate}" task-executor="singleTaskExecutor" />
	</int:service-activator>


	<int:channel id="rulesQueueChannel" />
	<int-redis:queue-inbound-channel-adapter queue="rules"
											 channel="rulesQueueChannel"
											 serializer="stringRedisSerializer"
											 task-executor="taskExecutor"/>
	<int:service-activator ref="ruleExeServiceActivator" method="rulesActivator"
						   input-channel="rulesQueueChannel" output-channel="rulesOutputChannel" />
	<int:channel id="rulesOutputChannel">
		<int:queue />
	</int:channel>
	<int:service-activator ref="persistenceServiceActivator" method="persistRule" input-channel="rulesOutputChannel">
		<int:poller fixed-rate="${si.service.activator.poller.fix.rate}" task-executor="taskExecutor" />
	</int:service-activator>



	<bean id="requestServiceActivator" class="cn.rongcapital.ruleengine.core.activator.RequestServiceActivator" />
	<bean id="ruleExeServiceActivator" class="cn.rongcapital.ruleengine.core.activator.RuleExeServiceActivator" />
	<bean id="persistenceServiceActivator" class="cn.rongcapital.ruleengine.core.activator.PersistenceServiceActivator" />


	<bean id="singleTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="1" />
		<property name="maxPoolSize" value="1" />
	</bean>

	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${si.taskExecutor.corePoolSize}" />
		<property name="maxPoolSize" value="${si.taskExecutor.maxPoolSize}" />
	</bean>

	<!--bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
		<property name="defaultSerializer" ref="jdkRedisSerializer" />
		<property name="keySerializer" ref="stringRedisSerializer" />
		<property name="valueSerializer" ref="jdkRedisSerializer" />
	</bean-->

</beans>
